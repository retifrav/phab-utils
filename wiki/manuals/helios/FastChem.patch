diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1bc2cee..d9d2144 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,142 +1,174 @@
+cmake_minimum_required(VERSION 3.22)
 
-# to build with cmake
-# create a build directory and move into it
-# $ mkdir build
-# $ cd build
-# generate the makefile (to do only ones, if we don't add files or change makefiles)
-# don't forget the two points at the end of the command '..'.
-# It runs cmake in the 'build' directory
-# but with the data from the '..' directory.
+project(fastchem CXX)
 
-cmake_minimum_required (VERSION 3.12 FATAL_ERROR)
-
-OPTION(USE_PYTHON "Compile FastChem's Python Wrapper" OFF)
-
-
-project(fastchem CXX C)
-
-
-include(CMakeDependentOption)
-cmake_dependent_option(ONLY_LIBRARY "Compile FastChem library only" ON "FASTCHEM_ONLY_LIBRARY" OFF)
+option(USE_PYTHON "Compile FastChem's Python wrapper" 0)
+option(BUILD_TOOL "Build the tool as well" 1)
 
+if(PROJECT_IS_TOP_LEVEL)
+    # affects only libraries targets, executables still need to set DEBUG_POSTFIX
+    set(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Filename postfix for libraries under DEBUG configuration")
+endif()
 
-#some C++/C flags
 set(CMAKE_CXX_STANDARD 11)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
-set(CMAKE_CXX_FLAGS "-Wall -pedantic -MMD")
-
-
-set(CMAKE_BUILD_TYPE Release)
-
-  
-#output directories
-set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR})
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR})
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
-
-
-
-#define the source files   
-set(SRC_FASTCHEM
-  fastchem_src/calc_densities.cpp
-  fastchem_src/calc_electron_densities.cpp
-  fastchem_src/calc_mean_mol_weight.cpp
-  fastchem_src/calc_species_densities.cpp
-  fastchem_src/check.cpp
-  fastchem_src/fastchem.cpp
-  fastchem_src/get.cpp
-  fastchem_src/init_add_species.cpp
-  fastchem_src/init_read_files.cpp
-  fastchem_src/init_solver.cpp
-  fastchem_src/init.cpp
-  fastchem_src/mass_action_constant.cpp
-  fastchem_src/options_read_files.cpp
-  fastchem_src/set.cpp
-  fastchem_src/solve_fastchem.cpp
-  fastchem_src/solver_bisection.cpp
-  fastchem_src/solver_coeff.cpp
-  fastchem_src/solver_linsol_quadsol.cpp
-  fastchem_src/solver_nelder_mead_electron.cpp
-  fastchem_src/solver_newtsol.cpp
-  fastchem_src/solver.cpp
-  fastchem_src/species_struct.cpp)
-  
-
-set(SRC_MAIN
-  model_src/model_main.cpp)
-
-  
-set(SRC_PYTHON_WRAPPER
-  python/fastchem_python_wrapper.cpp)
-
-#check for OpenMP
-find_package(OpenMP)  
+set(CMAKE_CXX_FLAGS "-Wall -pedantic") # -MMD
+
+add_library(${PROJECT_NAME})
+
+set(sources
+    fastchem_src/calc_densities.cpp
+    fastchem_src/calc_electron_densities.cpp
+    fastchem_src/calc_mean_mol_weight.cpp
+    fastchem_src/calc_species_densities.cpp
+    fastchem_src/check.cpp
+    fastchem_src/fastchem.cpp
+    fastchem_src/get.cpp
+    fastchem_src/init_add_species.cpp
+    fastchem_src/init_read_files.cpp
+    fastchem_src/init_solver.cpp
+    fastchem_src/init.cpp
+    fastchem_src/mass_action_constant.cpp
+    fastchem_src/options_read_files.cpp
+    fastchem_src/set.cpp
+    fastchem_src/solve_fastchem.cpp
+    fastchem_src/solver_bisection.cpp
+    fastchem_src/solver_coeff.cpp
+    fastchem_src/solver_linsol_quadsol.cpp
+    fastchem_src/solver_nelder_mead_electron.cpp
+    fastchem_src/solver_newtsol.cpp
+    fastchem_src/solver.cpp
+    fastchem_src/species_struct.cpp
+)
+
+target_sources(${PROJECT_NAME}
+    PRIVATE
+        ${sources}
+)
+
+target_include_directories(${PROJECT_NAME}
+    PRIVATE
+        # where the library itself will look for its internal headers
+        ${CMAKE_CURRENT_SOURCE_DIR}/fastchem_src
+    PUBLIC
+        # where top-level project will look for the library's public headers
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/fastchem_src>
+        # where external projects will look for the library's public headers
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+)
+
+set(public_headers
+    fastchem_src/input_output_struct.h
+    fastchem_src/fastchem_constants.h
+    fastchem_src/options.h
+    fastchem_src/fastchem.h
+    fastchem_src/solver.h
+    fastchem_src/species_struct.h
+)
+
+find_package(OpenMP)
+
+target_compile_options(${PROJECT_NAME} PRIVATE "-O3")
+if(OpenMP_FOUND)
+    # clang: warning: argument unused during compilation: '-Xclang -fopenmp'
+    if(APPLE)
+        target_compile_options(${PROJECT_NAME} BEFORE PRIVATE "-Xpreprocessor" "-fopenmp" "-I/usr/local/opt/libomp/include")
+    else()
+        target_compile_options(${PROJECT_NAME} BEFORE PRIVATE "${OpenMP_CXX_FLAGS}")
+    endif()
+endif()
 
+if(USE_PYTHON)
+    target_compile_options(${PROJECT_NAME} PRIVATE "-fPIC")
 
-if (USE_PYTHON MATCHES ON)
+    find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
 
     include(FetchContent)
     FetchContent_Declare(
         pybind11
         GIT_REPOSITORY https://github.com/pybind/pybind11
-        GIT_TAG        97976c16fb7652f7faf02d76756666ef87adbe7d
+        GIT_TAG 5b0a6fc2017fcc176545afe3e09c9f9885283242
     )
-
     FetchContent_GetProperties(pybind11)
     if(NOT pybind11_POPULATED)
         FetchContent_Populate(pybind11)
         add_subdirectory(${pybind11_SOURCE_DIR} ${pybind11_BINARY_DIR})
     endif()
 
-  #compilation target for FastChem's Python library
-  add_library(fastchem_for_py ${SRC_FASTCHEM})
-  
-  if (OpenMP_FOUND)
-    target_compile_options(fastchem_for_py PRIVATE "${OpenMP_CXX_FLAGS}" PRIVATE "-O3" PRIVATE "-fPIC")
-  else()
-    target_compile_options(fastchem_for_py PRIVATE "-O3" PRIVATE "-fPIC")
-  endif()
-
-  #find the python version
-  find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
-  
-  #compilation target for FastChem's Python wrapper
-  pybind11_add_module(pyfastchem ${SRC_PYTHON_WRAPPER})
-  
-  #find_package(pybind11 REQUIRED)
-  
-  set_target_properties(pyfastchem PROPERTIES LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/python")
-  
-  if (OpenMP_FOUND)
-    target_link_libraries(pyfastchem PRIVATE OpenMP::OpenMP_CXX)
-  endif()
-  
-  #target_link_libraries(pyfastchem PRIVATE fastchem_for_py OpenMP::OpenMP_CXX pybind11::module)
-  target_link_libraries(pyfastchem PRIVATE fastchem_for_py pybind11::module)
-endif()
+    set(pythonWrapperName "py${PROJECT_NAME}")
 
+    set(sources_python_wrapper
+        python/fastchem_python_wrapper.cpp
+    )
 
+    pybind11_add_module(${pythonWrapperName} ${sources_python_wrapper})
 
-#compilation target for FastChem
-add_library(fastchem_lib ${SRC_FASTCHEM})
+    #find_package(pybind11 REQUIRED)
 
-if (OpenMP_FOUND)
-  target_compile_options(fastchem_lib PRIVATE "${OpenMP_CXX_FLAGS}" PRIVATE "-O3")
-else()
-  target_compile_options(fastchem_lib PRIVATE "-O3")
-endif()
+    if(OpenMP_FOUND)
+        target_link_libraries(${pythonWrapperName} PRIVATE OpenMP::OpenMP_CXX)
+    endif()
 
+    target_link_libraries(${pythonWrapperName} PRIVATE ${PROJECT_NAME} pybind11::module) # OpenMP::OpenMP_CXX
 
-#in case we build the executable
-if (NOT ONLY_LIBRARY)
-  #compilation target for FastChem's standalone main
-  add_executable(fastchem ${SRC_MAIN})
+    install(TARGETS ${pythonWrapperName}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
+endif()
 
-  #link files for the final FastChem executable code
-  if (OpenMP_FOUND)
-    target_link_libraries(fastchem PRIVATE fastchem_lib OpenMP::OpenMP_CXX)
-  endif()
+# for a proper library installation, the relative "../" include paths in headers need to be fixed first,
+# and actually the folder structure needs to be changed too, so both internal and external
+# include paths could be #include <fastchem/header.h>
+
+include(GNUInstallDirs)
+include(CMakePackageConfigHelpers)
+
+set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${public_headers}")
+
+install(TARGETS ${PROJECT_NAME}
+    EXPORT "${PROJECT_NAME}Targets"
+    # these get default values from GNUInstallDirs, no need to set them
+    #RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} # bin
+    #LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+    #ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} # lib
+    # except for public headers, as we want them to be inside a library folder
+    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME} # include/fastchem
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} # include
+)
+# generate and install export file
+install(EXPORT "${PROJECT_NAME}Targets"
+    FILE "${PROJECT_NAME}Targets.cmake"
+    DESTINATION cmake
+)
+
+# create config file
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    INSTALL_DESTINATION cmake
+)
+# install config files
+install(FILES
+    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+    DESTINATION cmake
+)
+
+if(BUILD_TOOL)
+    set(toolName "${PROJECT_NAME}-tool")
+
+    add_executable(${toolName})
+    set(sources_tool model_src/model_main.cpp)
+    target_sources(${toolName} PRIVATE ${sources_tool})
+
+    set_target_properties(${toolName} PROPERTIES DEBUG_POSTFIX "d")
+
+    target_link_libraries(${toolName} PRIVATE ${PROJECT_NAME})
+    if (OpenMP_FOUND)
+        target_link_libraries(${toolName} PRIVATE OpenMP::OpenMP_CXX)
+    endif()
 
-  target_link_libraries(fastchem PRIVATE fastchem_lib)
+    set_target_properties(${toolName} PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
+    install(TARGETS ${toolName}
+        DESTINATION ${CMAKE_INSTALL_BINDIR}
+    )
 endif()
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..e79994f
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,8 @@
+@PACKAGE_INIT@
+
+include(CMakeFindDependencyMacro)
+find_dependency(OpenMP)
+
+include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")
+
+check_required_components(@PROJECT_NAME@)
diff --git a/model_src/model_main.cpp b/model_src/model_main.cpp
index b7459d8..cc5eb74 100644
--- a/model_src/model_main.cpp
+++ b/model_src/model_main.cpp
@@ -17,9 +17,9 @@
 * <http://www.gnu.org/licenses/>.
 */
 
-#include "../fastchem_src/fastchem.h"
-#include "../fastchem_src/input_output_struct.h"
-#include "../fastchem_src/fastchem_constants.h"
+#include <fastchem.h>
+#include <input_output_struct.h>
+#include <fastchem_constants.h>
 
 #include <vector>
 #include <iostream>
diff --git a/python/fastchem_python_wrapper.cpp b/python/fastchem_python_wrapper.cpp
index 16f90c0..75fe033 100644
--- a/python/fastchem_python_wrapper.cpp
+++ b/python/fastchem_python_wrapper.cpp
@@ -3,13 +3,13 @@
 #include "pybind11/pybind11.h"
 #include "pybind11/stl.h"
 #else
-#include "../_deps/pybind11-src/include/pybind11/pybind11.h"
-#include "../_deps/pybind11-src/include/pybind11/stl.h"
+#include "../build/_deps/pybind11-src/include/pybind11/pybind11.h"
+#include "../build/_deps/pybind11-src/include/pybind11/stl.h"
 #endif
 
-#include "../fastchem_src/fastchem.h"
-#include "../fastchem_src/input_output_struct.h"
-#include "../fastchem_src/fastchem_constants.h"
+#include <fastchem.h>
+#include <input_output_struct.h>
+#include <fastchem_constants.h>
 
 
 namespace py = pybind11;
